# ===================================================================
# OpenHub framework SPRING BOOT PROPERTIES
#
# ===================================================================

# PROFILES
# Comma-separated list of active profiles.
spring.profiles.active=h2,example-module
#spring.profiles.include= # Unconditionally activate the specified comma separated profiles.


# ===============================
# = CORE PROPERTIES
# ===============================
info.app.name=OpenHub
info.app.description=OpenHub integration framework
info.app.core.version=@project.version@ [${info.app.core.build.number}]
info.app.core.build.number=@git.commit.id.abbrev@
info.app.core.build.time=@git.build.time@
# version for extension
info.app.version=

# absolute path to the folder with log files
log.folder.path=@log.folder@
log.file.pattern=(^.*\\.log$|^.*\\.log\\.2\\d{3}-(0[1-9]|1[0-9])-[0|1|2|3]\\d?_\\d*\\.gz$)

# enable or disable final messages processing.
ohf.asynch.finalMessages.processingEnabled = false

# enable/disable final messages processor implementation deleting messages.
ohf.asynch.finalMessages.deleteProcessor.enabled = true

# ===============================
# = LOGGING
# ===============================
logging.file.name=openhub.log
#logging.level.*= # levels for loggers, e.g. "logging.level.org.springframework=DEBUG" (TRACE, DEBUG, INFO, WARN, ERROR, FATAL, OFF)
logging.level.org.openhubframework.openhub=INFO
# DEBUG level for logging request/response for REST layer
logging.level.org.openhubframework.openhub.web.RequestResponseLoggingFilter=DEBUG


# ===============================
# = APPLICATION
# ===============================
# IDENTITY (ContextIdApplicationContextInitializer)
#spring.application.index= # Application index.
spring.application.name=${info.app.name}

spring.main.allow-bean-definition-overriding=true
# ===============================
# = JPA / HIBERNATE
# ===============================

# Show or not log for each sql query
spring.jpa.show-sql=true

# Do not initialize the schema on startup, initialized by flyway.
spring.jpa.generate-ddl=false

# Hibernate ddl auto (create, create-drop, update, validate): with "validate" the database
# validate the schema, no changes will be make to the database, as it is managed by flyway.
spring.jpa.hibernate.ddl-auto = validate

# Additional native properties to set on the JPA provider.
spring.jpa.properties.hibernate.format_sql = false
spring.jpa.properties.hibernate.show_sql = false
spring.jpa.properties.hibernate.use_sql_comments = false
spring.jpa.properties.hibernate.generate_statistics = false

# Additional packages to be scanned for JPA entities in OpenHub datasource
ohf.jpa.additional-packages =

# Isolated JpaTransactionManager for OpenHub datasource.
# By default should be disabled, to leverage spring boot autoconfiguration.
# see org.openhubframework.openhub.core.config.JpaConfig for more info.
ohf.jpa.transaction-manager.enabled = false

# ===============================
# = SECURITY PROPERTIES
# ===============================
# SECURITY (SecurityProperties) - basic properties were removed in spring boot 2.0
#security.basic.authorize-mode=role # Security authorize mode to apply.
# Enable basic authentication.
#security.basic.enabled=false
#security.basic.path=/** # Comma-separated list of paths to secure.
# HTTP custom realm name.
security.realm.realm-name=OpenHub - integration platform
# Enable Cross Site Request Forgery support.
#security.enable-csrf=false
#security.filter-order=0 # Security filter chain order.
#security.filter-dispatcher-types=ASYNC, FORWARD, INCLUDE, REQUEST # Security filter chain dispatcher types.
#security.headers.cache=true # Enable cache control HTTP headers.
#security.headers.content-type=true # Enable "X-Content-Type-Options" header.
#security.headers.frame=true # Enable "X-Frame-Options" header.
#security.headers.hsts= # HTTP Strict Transport Security (HSTS) mode (none, domain, all).
#security.headers.xss=true # Enable cross site scripting (XSS) protection.
#security.ignored= # Comma-separated list of paths to exclude from the default secured paths.
#security.require-ssl=false # Enable secure channel for all requests.
#security.sessions=stateless # Session creation policy (always, never, if_required, stateless).
# Default user name.
#security.user.name=user
# Password for the default user name. A random password is logged on startup by default.
#security.user.password=pass
# Granted roles for the default user name.
#security.user.role=WS

# username and password for accessing web service of this integration platform by other systems
security.user.ws-user=wsUser
security.user.ws-password=wsPassword

# username and password for accessing web admin GUI
security.user.web-user=webUser
security.user.web-password=webPassword

# username and password for accessing web monitoring GUI
security.user.monitoring-user=monUser
security.user.monitoring-password=monPassword


# ===============================
# = HTTP encoding
# ===============================
# HTTP encoding (HttpEncodingProperties)
# Charset of HTTP requests and responses. Added to the "Content-Type" header if not set explicitly.
server.servlet.encoding.charset=UTF-8
# Enable http encoding support.
server.servlet.encoding.enabled=true
# Force the encoding to the configured charset on HTTP requests and responses.
# https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-1.4-Release-Notes
#   Forced character encoding now only applies to requests (and not responses).
#   If you want to force encoding for both requests and responses set spring.http.encoding.force to true.
server.servlet.encoding.force=true


# ===============================
# = JACKSON PROPERTIES
# ===============================
spring.jackson.serialization.WRITE_DATES_AS_TIMESTAMPS = false


# ===============================
# = ACTUATOR PROPERTIES
# ===============================

# JMX domain customization
management.endpoints.jmx.domain=${info.app.name}
spring.jmx.unique-names=true

# Enable Jolokia endpoint.
management.endpoint.jolokia.enabled=true
# Endpoint URL path.
management.endpoints.web.path-mapping.jolokia=/jolokia
# Enable security on the endpoint.
# Endpoint sensitive flag is no longer customizable as Spring Boot
# no longer provides a customizable security auto-configuration
#endpoints.jolokia.sensitive=true


# Enable Loggers endpoint.
management.endpoint.loggers.enabled=true
# Endpoint URL path.
management.endpoints.web.path-mapping.loggers=/loggers

# JOLOKIA (JolokiaProperties)
management.endpoint.jolokia.config.debug=true
#jolokia.config.*= # See Jolokia manual

# ===============================
# = MANAGEMENT HTTP SERVER
# ===============================
# MANAGEMENT HTTP SERVER (ManagementServerProperties)
# Add the "X-Application-Context" HTTP header in each response.
management.server.add-application-context-header=false
# Management endpoint web.base-path. For instance `/actuator`
management.endpoints.web.base-path=/mgmt
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=when_authorized
# Security role(s) required to access the endpoints
management.security.role=MONITORING
# Fallback to renamed property for newer version of Spring Boot
#management.security.roles=${management.security.role}
#Reason: The security auto-configuration is no longer customizable.


# ===============================
# = JAVA MELODY
# ===============================
# Enable JavaMelody auto-configuration (optional, default: false)
javamelody.enabled = true
# Initialization parameters for JavaMelody (optional)
#    to change the default "/monitoring" path
# Note: if you change it, you will probably want to update admin console external link config property accordingly.
javamelody.init-parameters.monitoring-path = /web/admin/monitoring/javamelody


# ===============================
# = SERVER CONFIGURATION
# ===============================
# EMBEDDED SERVER CONFIGURATION (ServerProperties)
# Enable the default error page displayed in browsers in case of a server error.
server.error.whitelabel.enabled=false


# ===============================
# = INTERNATIONALIZATION
# ===============================
# INTERNATIONALIZATION (MessageSourceAutoConfiguration)
# Comma-separated list of basenames, each following the ResourceBundle convention.
#spring.messages.basename=classpath:messages/messages
#spring.messages.cache-seconds=-1 # Loaded resource bundle files cache expiration, in seconds. When set to -1, bundles are cached forever.
#spring.messages.encoding=UTF-8 # Message bundles encoding.
#spring.messages.fallback-to-system-locale=true # Set whether to fall back to the system Locale if no files for a specific Locale have been found.


# ===============================
# = SPRING MVC
# ===============================
# SPRING MVC (WebMvcProperties)
#spring.mvc.async.request-timeout= # Amount of time (in milliseconds) before asynchronous request handling times out.
#spring.mvc.date-format= # Date format to use. For instance `dd/MM/yyyy`.
#spring.mvc.dispatch-trace-request=false # Dispatch TRACE requests to the FrameworkServlet doService method.
#spring.mvc.dispatch-options-request=false # Dispatch OPTIONS requests to the FrameworkServlet doService method.
#spring.mvc.favicon.enabled=true # Enable resolution of favicon.ico.
#spring.mvc.ignore-default-model-on-redirect=true # If the content of the "default" model should be ignored during redirect scenarios.
#spring.mvc.locale= # Locale to use.
#spring.mvc.media-types.*= # Maps file extensions to media types for content negotiation.
#spring.mvc.message-codes-resolver-format= # Formatting strategy for message codes. For instance `PREFIX_ERROR_CODE`.
    # Path pattern used for static resources.
spring.mvc.static-path-pattern=/console/**
#spring.mvc.throw-exception-if-no-handler-found=false # If a "NoHandlerFoundException" should be thrown if no Handler was found to process a request.
#spring.mvc.view.prefix= # Spring MVC view prefix.
#spring.mvc.view.suffix= # Spring MVC view suffix.

# SPRING RESOURCES HANDLING (ResourceProperties)
#spring.resources.add-mappings=true # Enable default resource handling.
#spring.resources.cache-period= # Cache period for the resources served by the resource handler, in seconds.
#spring.resources.chain.cache=true # Enable caching in the Resource chain.
#spring.resources.chain.enabled= # Enable the Spring Resource Handling chain. Disabled by default unless at least one strategy has been enabled.
#spring.resources.chain.gzipped=false # Enable resolution of already gzipped resources.
#spring.resources.chain.html-application-cache=false # Enable HTML5 application cache manifest rewriting.
#spring.resources.chain.strategy.content.enabled=false # Enable the content Version Strategy.
#spring.resources.chain.strategy.content.paths=/** # Comma-separated list of patterns to apply to the Version Strategy.
#spring.resources.chain.strategy.fixed.enabled=false # Enable the fixed Version Strategy.
#spring.resources.chain.strategy.fixed.paths=/** # Comma-separated list of patterns to apply to the Version Strategy.
#spring.resources.chain.strategy.fixed.version= # Version string to use for the Version Strategy.
# Locations of static resources.
spring.resources.static-locations=classpath:/META-INF/resources/console/


# ===============================
# = CAMEL
# ===============================
# See CamelConfigurationProperties
# Sets whether tracing is enabled or not. Default is false.
camel.springboot.tracing=true
# Sets whether fault handling is enabled or not. Default is false.
camel.springboot.handle-fault=true
# Sets the name of the CamelContext
camel.springboot.name=camelContext

# ===============================
# = CLUSTER
# ===============================

# Code of actual node for this application server instance
ohf.cluster.actualNodeInstance.code = LocalNode

# ===============================
# = HAZELCAST
# ===============================
# the location of the configuration file to use to initialize Hazelcast.
# the default Hazelcast configuration
spring.hazelcast.config=classpath:/config/ohf_hazelcast.xml

# ===============================
# = QUARTZ
# ===============================
#base configuration quartz scheduler for cluster
org.quartz.scheduler.instanceId = AUTO
org.quartz.scheduler.skipUpdateCheck = true
org.quartz.jobStore.isClustered = true
org.quartz.jobStore.clusterCheckinInterval = 5000
org.quartz.jobStore.class = org.quartz.impl.jdbcjobstore.JobStoreTX
org.quartz.jobStore.useProperties = true

# ===============================
# = FLYWAY
# ===============================
# OpenHub baseline name
spring.flyway.baseline-description=OpenHub
# version to start migration
#spring.flyway.baseline-version=
#flyway.baseline-on-migrate=
#flyway.check-location=false # Check that migration scripts location exists.
#flyway.clean-on-validation-error= #
spring.flyway.enabled=true
#flyway.encoding= #
#flyway.ignore-failed-future-migration= #
#flyway.init-sqls= # SQL statements to execute to initialize a connection immediately after obtaining it.
#flyway.locations=classpath:db/migration # locations of migrations scripts
#flyway.out-of-order= #
#flyway.password= # JDBC password if you want Flyway to create its own DataSource
#flyway.placeholder-prefix= #
#flyway.placeholder-replacement= #
#flyway.placeholder-suffix= #
#flyway.placeholders.*= #
#flyway.schemas= # schemas to update
#flyway.sql-migration-prefix=V #
#flyway.sql-migration-separator= #
#flyway.sql-migration-suffix=.sql #
spring.flyway.table=schema_version
#flyway.url= # JDBC url of the database to migrate. If not set, the primary configured data source is used.
#flyway.user= # Login user of the database to migrate.
#flyway.validate-on-migrate= #

# ===============================
# = THROTTLING
# ===============================

# the implementation of throttling counter, there are built-in implementations such as
#   org.openhubframework.openhub.core.throttling.ThrottleCounterMemoryImpl (default) - in-memory implementation,
#		suitable for standalone server only
#   org.openhubframework.openhub.core.throttling.ThrottleCounterHazelcastImpl - implementation with Hazelcast shared map,
#		suitable for cluster
#
ohf.throttling.counter.impl=org.openhubframework.openhub.core.throttling.ThrottleCounterMemoryImpl


###############################################################################
#  Throttling configuration
#
#   There the following property names:
#   - throttling.defaultInterval: default time interval (in seconds) if not defined by system/operation
#   - throttling.defaultLimit: default limit if not defined by system/operation
#   - throttling.sourceSystem.operationName, where
#       - sourceSystem is specific source system or '*' if any system
#            (source system is case-insensitive value from trace header (ExternalSystemExtEnum))
#       - operationName is specific operation name or '*' if any operation
#
#   Property values (except for default values) have the following format:
#       limit [/interval]
#
#   Examples:
#       throttling.crm.op1=10
#       throttling.crm.*=10/40
#       throttling.*.sendSms=60/30
###############################################################################

throttling.defaultInterval=60
throttling.defaultLimit=60
throttling.sourceSystem.*=300/60
throttling.*.syncHello=15/60
throttling.*.asyncHello=50/60

        

# ===============================
# = ALERTS
# ===============================

###############################################################################
#  Alerts configuration
#
#   There the following property names:
#   - alerts.N.id: unique alert identification (if not defined then order number (=N) is used instead)
#   - alerts.N.limit: limit that must be exceeded to activate alert
#   - alerts.N.sql: SQL query that returns count of items for comparison with limit value
#   - [alerts.N.enabled]: if specified alert is enabled or disabled; enabled is by default
#   - [alerts.N.mail.subject]: notification (email, sms) subject; can be used Java Formatter placeholders (%s = alert ID)
#   - [alerts.N.mail.body]: notification (email, sms) body; can be used Java Formatter placeholders (%d = actual count, %d = limit)
#
###############################################################################

# checks if there is any waiting message that exceeds time limit for timeout
alerts.900.id=WAITING_MSG_ALERT
alerts.900.limit=0
alerts.900.sql=SELECT COUNT(*) FROM message WHERE state = 'WAITING_FOR_RES' AND last_update_timestamp < (current_timestamp - interval '3600 seconds')



## ===============================
## PAGING PROPERTIES
## ===============================
spring.data.paging.offset-based.one-based=true
spring.data.paging.offset-based.max-page-size=100
spring.data.paging.offset-based.page-param-name=p
spring.data.paging.offset-based.size-param-name=s
spring.data.paging.offset-based.sort-param-name=sort


## ===============================
## CORS PROPERTIES
## ===============================
cors.enabled=true
#cors.allow-credentials= # Set whether credentials are supported. When not set, credentials are not supported.
# Comma-separated list of headers to allow in a request. '*' allows all headers.
cors.allowed-headers=*
# Comma-separated list of methods to allow. '*' allows all methods.
cors.allowed-methods=*
# Comma-separated list of origins to allow. '*' allows all origins. When not set, CORS support is disabled.
cors.allowed-origins=*
#cors.exposed-headers=# Comma-separated list of headers to include in a response.
# How long, in seconds, the response from a pre-flight request can be cached by clients.
cors.max-age=1800

## ===============================
## ADMIN CONSOLE
## ===============================
# Configuration of menu items
ohf.admin.console.config.menu.analytics.messages.enabled = true
ohf.admin.console.config.menu.infrastructure.services.wsdl.enabled = true
ohf.admin.console.config.menu.cluster.nodes.enabled = true
ohf.admin.console.config.menu.configuration.system-params.enabled = ${endpoints.configprops.enabled:true}
ohf.admin.console.config.menu.configuration.logging.enabled = ${endpoints.loggers.enabled:true}
ohf.admin.console.config.menu.configuration.environment.enabled = ${endpoints.env.enabled:true}
ohf.admin.console.config.menu.configuration.error-code-catalog.enabled = true
ohf.admin.console.config.menu.external-links.enabled = true
ohf.admin.console.config.menu.external-links.items[0].title = Javamelody Monitoring
ohf.admin.console.config.menu.external-links.items[0].link = ../monitoring/javamelody
ohf.admin.console.config.menu.external-links.items[0].enabled = ${javamelody.enabled}
ohf.admin.console.config.menu.changes.enabled = true

# Messages api configuration
ohf.admin.console.messages.limit = 100

# Logged user session concurrency limit
ohf.admin.console.session-concurrency.limit = 2