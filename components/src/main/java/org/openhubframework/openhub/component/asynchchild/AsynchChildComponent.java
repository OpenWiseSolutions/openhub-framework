/*
 * Copyright 2014 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.openhubframework.openhub.component.asynchchild;

import java.util.Map;
import java.util.UUID;

import org.openhubframework.openhub.api.entity.BindingTypeEnum;

import org.apache.camel.Endpoint;
import org.apache.camel.impl.DefaultComponent;
import org.apache.camel.util.ObjectHelper;
import org.springframework.util.Assert;


/**
 * Apache Camel component "asynch-child" for creating asynchronous child message.
 * Asynchronous child message can be created from synchronous or asynchronous message. If from synch. message
 * then {@link BindingTypeEnum#SOFT SOFT} binding is set.
 *
 * <p>
 * Syntax: {@code asynch-child:service:operation[?options]}, where
 * <ul>
 *     <li>message service name, e.g. "customer".
 *     <li>operation name, e.g. "createCustomer"
 * </ul>
 *
 * And options are:
 * <ul>
 *    <li>correlationId (can be empty, by default ID is generated by {@link UUID#randomUUID()})
 *    <li>sourceSystem (can be empty, source system, e.g. "CRM".
 *              If not defined then {@link AsynchChildProducer#DEFAULT_EXTERNAL_SYSTEM} is used)
 *    <li>bindingType (can be empty, possible values are {@link BindingTypeEnum#HARD HARD} (default)
 *          and {@link BindingTypeEnum#SOFT SOFT})
 *    <li>objectId (can be empty, ID that will be changed during message processing)
 *    <li>funnelValue (can be empty, funnel value)
 * </ul>
 *
 * @author Petr Juza
 */
public class AsynchChildComponent extends DefaultComponent {

    @Override
    protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {
        AsynchChildEndpoint endpoint = new AsynchChildEndpoint(uri, this);

        // parse URI - "service:operation"
        String endpointURI = ObjectHelper.after(uri, ":");
        if (endpointURI != null && endpointURI.startsWith("//")) {
            endpointURI = endpointURI.substring(2);
        }
        Assert.hasText(endpointURI, "Asynch-child endpoint URI must not be empty");

        // endpointURI = "service:operation"
        String serviceName = ObjectHelper.before(endpointURI, ":");
        String operationName = ObjectHelper.after(endpointURI, ":");

        if (operationName != null && operationName.contains("?")) {
            operationName = ObjectHelper.before(operationName, "?");
        }

        Assert.hasText(serviceName, "Service name can't be empty for asynch-child component");
        Assert.hasText(operationName, "Operation name can't be empty for asynch-child component");

        endpoint.setService(serviceName);
        endpoint.setOperationName(operationName);

        setProperties(endpoint, parameters);

        return endpoint;
    }

    @Override
    protected void validateURI(String uri, String path, Map<String, Object> parameters) {
        super.validateURI(uri, path, parameters);
    }
}
